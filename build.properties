#
# $Header: /cvsroot/ebxmlrr/omar/build.properties,v 1.12 2007/05/25 19:33:49 farrukh_najmi Exp $
#
# This file contains the default properties for DEPLOYMENT of omar. 
# The RUNTIME properties should be set in omar.properties, omar-common.properties
# and jaxr-ebxml.properties in classpath or in your home directory (see
# documentation for more info). 
#
########################     Warning! Warning Warning #######################################
#
#
# Important notes about this file:
#
# 0. JAVA_HOME must be set in execution shell environment.
#
# 1. DO NOT EVER EDIT THIS FILE!!! It contains the default property values for the project
#    and are set only by the freebXML Registry dev team in source control.
#
# 2. If you want to override a property value then define it in a local.build.properties file.
#    If you make any changes to the local.build.properties file you MUST do "./build.sh clean compile"
#    in order to make sure that runtime property files in build/conf are updated correctly.
#
# 3. If a property in local.build.properties uses a property variable defined in this file
#    then duplicate the property variable definition in local.build.properties even if it
#    is the same as in this file.
#
# 4. Only place those properties in local.build.properties that need to be customized or
#    are variable definitions that are needed for defining other properties in 
#    local.build.properties. The local.build.properties should be as minimal as possible.
#
# 5. Use forward slashes for path separators on ALL platforms. Even on windows. See example below:
#    catalina.home=c:/Tomcat-5.5.17
#
#############################################################################################

#
# The name of the omar deployment instance.
# This may be used to deploy multiple instances of omar by overriding
# this property in ant invocation as in: "ant cleandb -Domar.name=omar1"
# Do not change this property unless you are doing multi-registry deployment
#
omar.name=omar

# Distribution version. Users need not edit this.
# This string might be used as a directory name (for omar.home)
dist.version=3.1

# The directory where to initialize and save omar settings.
# 'omar.home' is used by the build script, while 'omar.home.template' is set
# to property files and used by the code and file databases (it supports the
# '$user.home' variable, for later evaluation, at run time).
# Variables should point to same location if you plan to use omar in the same
# machine where you compile it and run genKeys/createDB targets.
# Example: Fixed location
#  omar.home=/fixed/location/omar
#  omar.home.template=/fixed/location/omar
# Example: Relative to user home (with user home determined at run time in
#   omar.home.template case)
#  omar.home=${user.home}/omar
#  omar.home.template=$user.home/omar
#
# Note: omar.home.template should use $user.home (no braces)
omar.home=${user.home}/${omar.name}/${dist.version}
omar.home.template=$user.home/${omar.name}/${dist.version}

# the location of your JavaCC directory
javacc.home=${omar.basedir}/misc/lib

# Target VM version for which to compile class files
compile.target=1.8

# The directory for storing repository items. When you execute a appropriate
# target in build.xml, this directory will be created for you.
# (currently not supported)
# omar.repository.home=${omar.home}/data/repository

## tomcat installation home (location of binaries) and base (your
## instance). These values may be different when using a shared Tomcat
## installation.
catalina.home=${user.home}/jakarta-tomcat-5.0.28
catalina.base=${catalina.home}

## Settings when using a Tomcat installation from shared NetBeans 4.0
## installation.
#catalina.home=/usr/lib/netbeans/nb4.0/jakarta-tomcat-5.0.28
#catalina.base=${user.home}/.netbeans/4.0/jakarta-tomcat-5.0.28_base

# Tomcat 5.5.x uses different context definition. Set the following
# property in your local.build.properties file to use the new jndi-context
# template (filename relative to omar.conf)
#appserver-jndi-context.filename=jndi-context-5.5.x.xml

## Additional Java settings used when starting or stopping Tomcat.  Below
## are just some of the possible examples.  Memory increases (especially
## setting the starting and maximum heap space to the same,
## much-larger-than-default values) seem to be very useful.  Other
## examples are for debugging.
#catalina.java.opts=-Xms256M -Xmx256M
#catalina.java.opts=-verbose\:gc
#catalina.java.opts=-verbose\:gc -XX\:+PrintGCDetails -XX\:+PrintGCTimeStamps
#catalina.java.opts=-verbose\:gc -XX\:+PrintTenuringDistribution
#catalina.java.opts=-Xloggc\:${catalina.base}/logs/gc.log

# The directory for the unit test reports. Will be appended with
# "-<timestamp>" (or "<timestamp>" if the prefix is itself a directory
# name)
omar.reports.unittest.dir.prefix=build/reports/unit
#omar.reports.unittest.dir.prefix=${catalina.base}/webapps/ROOT/downloads/reports/unit

# The directory for the unit test HTML reports. Will be appended with
# "-<timestamp>" (or "<timestamp>" if the prefix is itself a directory
# name). To place this output under above directory, do not define here.
#omar.reports.unittest.html.prefix=${catalina.base}/webapps/ROOT/reports/${omar.name}

# Whether to create a symbolic link from "omar.reports.unittest.dir.prefix"
# to "omar.reports.unittest.dir.prefix-<timestamp>".  Will also create link
# for HTML output if ${omar.reports.unittest.html.prefix} is defined.
# Ignored for report directory or html directory if
# ${omar.reports.unittest.dir.prefix} or
# ${omar.reports.unittest.html.prefix} (respectively) is a directory name.
omar.reports.unittest.dir.link=false

# Whether to create a zip containing the results of a test run.
omar.reports.unittest.dir.zip=true

#
# Base URL at which omar container is found
# The default value below may be overriden if needed
omar.container.url=http://localhost:8080

#
# The base URL to the registry server instance.
# The default value below may be overriden if needed
#
omar.registry.baseurl=${omar.container.url}/${omar.name}/registry

## Database properties
# database : Database being used *
# dbDialect : Database specific Hibernate dialect *
# dbDriverDir : Directory containing ${jdbcDriver} and ${dbDeploymentJars}
# dbLargeBinaryType : SQL Type for RepositoryItem and other binaries (blob or
#  binary) *
# dbLargeBinaryTypePropLength: length\=<length in bytes for max size for
#  repository items>
# dbAdhocQueryQueryLength: The length of the query column in the adhoc query table. Default is 4096
# dbPassword : Database password
# dbShutdownURL : URL used to checkpoint the database (Derby only currently)
# dbTransactionIsolation : The transaction isolation level to be used (support
#  varies)
# dbURL : JDBC connection URL
# dbUsername: Database username
# jdbcClassName : JDBC driver class (implements java.sql.Driver)
# jdbcDriver : JDBC driver filename
#
# * These determine the choice of SQL for the database schema since different
#   databases have different capabilities.  See the 'prepare-createdb' target.
#
# Note: dbURL should use $user.home (no braces) when referencing a local file
#
# Specify the following for deployment-specific overrides:
# dbDeploymentClass : ${jdbcClassName} override
# dbDeploymentJars : ${jdbcDriver} override (unlike ${jdbcDriver}, a pattern)
# dbDeploymentPassword : ${dbPassword} override
# dbDeploymentShutdownURL : ${dbShutdownURL} override (Derby only currently)
# dbDeploymentStartServer : start database server? (Derby only currently)
# dbDeploymentURL : ${dbURL} override
# dbDeploymentUsername : ${dbUsername} override
# dbName : directory containing dB, root for database URLs
# dbParamsFile : file of additional content for jndi-context.xml, in
#  conf/database (Derby only currently, leave unset if not needed)
#
## Choose one of the databases below:


## PostgreSQL Database
#database=postgresql
#dbDialect=net.sf.hibernate.dialect.PostgreSQLDialect
#dbLargeBinaryType=binary
#dbLargeBinaryTypePropLength=
#dbName=${omar.name}
#dbParamsFile=
#dbPassword=omar
#dbTransactionIsolation=TRANSACTION_READ_COMMITTED
#dbURL=jdbc:postgresql://localhost:5432/${omar.name}
#dbUsername=omar
#jdbcClassName=org.postgresql.Driver
#jdbcDriver=postgresql.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

## Oracle 9 Database
#database=oracle
#dbDialect=net.sf.hibernate.dialect.Oracle9Dialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${omar.name}
#dbParamsFile=
#dbPassword=omar
#dbTransactionIsolation=TRANSACTION_READ_COMMITTED
#dbURL=jdbc:oracle:thin:@localhost:1521:${omar.name}
#dbUsername=omar
#jdbcClassName=oracle.jdbc.driver.OracleDriver
#jdbcDriver=classes12.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}
#
# Oracle 9 and 10 have a 4000 upper limit. Do not exceed it.
#dbAdhocQueryQueryLength=4000

## HSQLDB Database (server mode)
#database=hsqldb
#dbDialect=net.sf.hibernate.dialect.HSQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${omar.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:hsqldb:hsql://localhost/${omar.name}
#dbUsername=sa
#jdbcClassName=org.hsqldb.jdbcDriver
#jdbcDriver=hsqldb.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

## HSQLDB Database (in-process mode)
#database=hsqldb
#dbDialect=net.sf.hibernate.dialect.HSQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${omar.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:hsqldb:$omar.home/data/registry/${omar.name}
#dbUsername=sa
#jdbcClassName=org.hsqldb.jdbcDriver
#jdbcDriver=hsqldb.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

## Where to find Derby Jar files
#dbDriverDir=/opt/sun/Derby/lib

## Derby database, all modes
## Set your local.build.properties to a consistent set of properties from the 3 options below as well
database=derby
dbDialect=org.freebxml.omar.server.repository.hibernate.DerbyDialect
dbLargeBinaryType=blob
dbLargeBinaryTypePropLength=length\="2147483647"
dbName=$omar.home/data/registry/${omar.name}
dbParamsFile=derby-params.template
## ??? Derby docs recommend TRANSACTION_READ_COMMITTED
dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED

## Derby Database, embedded mode everywhere
dbDeploymentJars=derby.jar, derbyLocale*.jar
dbPassword=
dbShutdownURL=jdbc:derby:${dbName};shutdown=true
dbURL=jdbc:derby:${dbName};create=true
dbUsername=
jdbcClassName=org.apache.derby.jdbc.EmbeddedDriver
jdbcDriver=derby.jar
## to start dB server in deployment container (not that client mode will be used
## anywhere by default), include the following in local.build.properties as well
#dbDeploymentJars=derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentStartServer=true

## Derby Database, client mode everywhere
#dbPassword=app
#dbShutdownURL=jdbc:derby://localhost:1527/${dbName};shutdown=true
#dbURL=jdbc:derby://localhost:1527/${dbName};create=true
#dbUsername=APP
#jdbcClassName=org.apache.derby.jdbc.ClientDriver
#jdbcDriver=derbyclient.jar
## to start dB server (which must be running somewhere for this deployment
## configuration to operate) in deployment container, include the following
## in local.build.properties as well
#dbDeploymentJars=derbyclient.jar, derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentStartServer=true

## Derby Database, embedded mode for deployment, dB server running in the
## same container (note /must/ be running in same container since no other
## process will be able to access the database), client otherwise
#dbDeploymentClass=org.apache.derby.jdbc.EmbeddedDriver
#dbDeploymentJars=derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentPassword=
#dbDeploymentShutdownURL=jdbc:derby:${dbName};shutdown=true
#dbDeploymentStartServer=true
#dbDeploymentURL=jdbc:derby:${dbName};create=true
#dbDeploymentUsername=
#dbPassword=app
#dbShutdownURL=jdbc:derby://localhost:1527/${dbName};shutdown=true
#dbURL=jdbc:derby://localhost:1527/${dbName};create=true
#dbUsername=APP
#jdbcClassName=org.apache.derby.jdbc.ClientDriver
#jdbcDriver=derbyclient.jar

## MySQL Database
## MySQL JDBC driver not included in omar CVS or distro
## Manually download mysql-connector and copy jar to misc/lib
#database=mysql
#dbDialect=net.sf.hibernate.dialect.MySQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${omar.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:mysql://localhost/${omar.name}
#dbUsername=root
#jdbcClassName=com.mysql.jdbc.Driver
#jdbcDriver=mysql-connector-java-3.1.12-bin.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

#
#Used in calls to SOAPSender in build.xml
#Set to true if you want to run createDemoDB without Tomcat running (default)
#Set to false otherwise
localCall=true

## ${omar.server.cache.primeCacheEvent} value used in deployed Omar
## instance. If possible use default "onCacheInit" in production as it performs better.
##
## "onFirstUse" is primarily for Omar development team. It allows
## container to run while an embedded database is re-created.
##
## Important:
## When localCall is false then the value MUST be "onFirstUse" in your local.build.properties.
## When localCall is true then the value SHOULD be "onCacheInit" (default).
##
## See omar.properties for additional comments on this setting.
primeCacheEvent=onCacheInit

# Used to control apache common logging.
# This only affects runSOAPSender and some of the build-nb4.xml targets and
# *does not* affect a deployed omar.
#
# Use NoOpLog by default so junit tests are not verbose.
# TODO: Make junit tests use a different log4.properties and
# send output to a separate file to allow the default
# here to be Log4JLogger in future.
#
# Use Log4JLogger to have logging output and control that output
# using conf/log4j.properties. This is useful when debugging.
#
# Use SimpleLog if for some reason the deployment does not have Log4J
# and logging is desired.
#
#
#apacheLog=org.apache.commons.logging.impl.SimpleLog
#apacheLog=org.apache.commons.logging.impl.Log4JLogger
apacheLog=org.apache.commons.logging.impl.NoOpLog

# HTTP Proxy settings
proxyHost=
proxyPort=80
# a '|' delimited list of host names to connect to directly
#nonProxyHosts=
#socksProxyHost=
#socksProxyPort=1080

# Set to true to include the <security-constraints> tag in the web.xml file.
# This will instruct the web container to require that users authenticate
# to access the ebxmlrr web client.
deployWithSecurityConstraints=false

# The role that users must be assigned to in the web container's user list in
# order to access the ebxmlrr web client. If deployWithSecurityConstraints=true,
# then this must be set.
#authConstraintRoleName=ebxmlrr-user

# The login name to use for users who login to a secure ebxmlrr web client
# using the Guest option. The user specified here must exist in the web container's
# user list. If deployWithSecurityConstraints=true, then this must be set.
#guestPrincipalName=RegistryGuest

#
# Points to the installation of JWSDP 1.6 which must (*) be downloaded and installed
# separately from http://java.sun.com/webservices/downloads/webservicespack.html
# (alternatively, you can use JWSDP 1.5, but that requires extra settings)
#
jwsdp.home=${user.home}/jwsdp-1.6
libs.jaxr-api.jar=${jwsdp.home}/jaxr/lib/jaxr-api.jar

libs.jaxb-api.jar=${jwsdp.home}/jaxb/lib/jaxb-api.jar
libs.jaxb-impl.jar=${jwsdp.home}/jaxb/lib/jaxb-impl.jar
libs.jaxb-libs.jar=${jwsdp.home}/jaxb/lib/jaxb-libs.jar
libs.jaxb-xjc.jar=${jwsdp.home}/jaxb/lib/jaxb-xjc.jar

libs.jaxrpc-api.jar=${jwsdp.home}/jaxrpc/lib/jaxrpc-api.jar
libs.jaxrpc-spi.jar=${jwsdp.home}/jaxrpc/lib/jaxrpc-spi.jar
libs.jaxrpc-impl.jar=${jwsdp.home}/jaxrpc/lib/jaxrpc-impl.jar

libs.saaj-api.jar=${jwsdp.home}/saaj/lib/saaj-api.jar
libs.saaj-impl.jar=${jwsdp.home}/saaj/lib/saaj-impl.jar

libs.activation.jar=${jwsdp.home}/jwsdp-shared/lib/activation.jar
libs.commons-beanutils.jar=${jwsdp.home}/jwsdp-shared/lib/commons-beanutils.jar
libs.commons-collections.jar=${jwsdp.home}/jwsdp-shared/lib/commons-collections.jar
libs.commons-digester.jar=${jwsdp.home}/jwsdp-shared/lib/commons-digester.jar
libs.commons-logging.jar=${jwsdp.home}/jwsdp-shared/lib/commons-logging.jar
libs.jaas.jar=${jwsdp.home}/jwsdp-shared/lib/jaas.jar
libs.jax-qname.jar=${jwsdp.home}/jwsdp-shared/lib/jax-qname.jar
libs.jta-spec1_0_1.jar=${jwsdp.home}/jwsdp-shared/lib/jta-spec1_0_1.jar
libs.mail.jar=${jwsdp.home}/jwsdp-shared/lib/mail.jar
libs.namespace.jar=${jwsdp.home}/jwsdp-shared/lib/namespace.jar
libs.relaxngDatatype.jar=${jwsdp.home}/jwsdp-shared/lib/relaxngDatatype.jar
libs.xsdlib.jar=${jwsdp.home}/jwsdp-shared/lib/xsdlib.jar

libs.jaxp-api.jar=${jwsdp.home}/jaxp/lib/jaxp-api.jar

libs.dom.jar=${jwsdp.home}/jaxp/lib/endorsed/dom.jar
libs.sax.jar=${jwsdp.home}/jaxp/lib/endorsed/sax.jar
libs.xalan.jar=${jwsdp.home}/jaxp/lib/endorsed/xalan.jar
libs.xercesImpl.jar=${jwsdp.home}/jaxp/lib/endorsed/xercesImpl.jar

libs.servlet-api.jar=${jwsdp.home}/wsi-sampleapp/lib/servlet-api.jar

libs.jstl.jar=${jwsdp.home}/jstl/lib/jstl.jar
libs.standard.jar=${jwsdp.home}/jstl/lib/standard.jar

libs.ant.jar=${jwsdp.home}/apache-ant/lib/ant.jar
libs.ant-junit.jar=${jwsdp.home}/apache-ant/lib/ant-junit.jar
libs.ant-launcher.jar=${jwsdp.home}/apache-ant/lib/ant-launcher.jar
libs.ant-nodeps.jar=${jwsdp.home}/apache-ant/lib/ant-nodeps.jar
libs.ant-trax.jar=${jwsdp.home}/apache-ant/lib/ant-trax.jar

libs.xmldsig.jar=${jwsdp.home}/xmldsig/lib/xmldsig.jar

libs.soapprocessor.jar=${jwsdp.home}/saaj/samples/soapprocessor/lib/soapprocessor.jar
libs.FastInfoset.jar=${jwsdp.home}/fastinfoset/lib/FastInfoset.jar
libs.jsr173_api.jar=${jwsdp.home}/sjsxp/lib/jsr173_api.jar
libs.xws-saml.jar=${jwsdp.home}/xws-security/lib/xws-saml.jar
libs.xws-security.jar=${jwsdp.home}/xws-security/lib/xws-security.jar
libs.xmlsec.jar=${jwsdp.home}/jwsdp-shared/lib/xmlsec.jar

#
# For JWSDP 1.5, use the security jars from misc/lib instead.
#
#libs.xws-security.jar=${omar.basedir}/misc/lib/xws-security.jar
#libs.xmlsec.jar=${omar.basedir}/misc/lib/xmlsec.jar

#
# In order to use JWSDP1.6 and JDK1.4 together, endorse JAXP dirs.
#
#build.lib.endorsed=${jwsdp.home}/jaxp/lib${path.separator}${jwsdp.home}/jaxp/lib/endorsed

#
# If using JWSDP1.6 and JDK1.4 together, the custom Sun JAXP Xalan/Xerces jars need to be available to Omar at runtime
#
# Mode = auto/manual.  auto = copy Sun JAXP jars automatically at build time. manual = user has to execute copySunJAXPJars Ant target explicitly to copy jars
# Destination = webapp/endorsed.  webapp = copies jars into the Omar webapp. endorsed = copies jars into container's endorsed lib directory
#
#copySunJAXPJars.Mode=auto
#copySunJAXPJars.Destination=webapp

#
# SOAP Security Provider specific properties. Needs to be coordinated with jwsdp.home
# for jwsdp-1.5 use: org/freebxml/omar/common/security/xwssec10
# for JES4 use: org/freebxml/omar/common/security/xwssec11
# for jwsdp-1.6 use: org/freebxml/omar/common/security/xwssec20
# for jwsdp-2.0 use: org/freebxml/omar/common/security/xwssec20FCS
#
soapSecurityProviderDir=org/freebxml/omar/common/security/xwssec20

# for JAX-RPC; modify these commands if incorrect for your JWSDP version
wscompile=${jwsdp.home}/jaxrpc/bin/wscompile.${script.suffix}
wsdeploy=${jwsdp.home}/jaxrpc/bin/wsdeploy.${script.suffix}


# Location of the jalopy-ant jar.
#
# If using Jalopy, download and unzip jalopy-ant-*.zip from
# http://jalopy.sourceforge.net/ and install jar in ${jalopy.home}.
#
jalopy.home=/usr/local/src/jalopy/lib

# Ant build scripts imported by main build.xml
file.omar-build-compile=build-compile.xml
file.omar-build-extDB=build-extDB.xml
file.omar-build-demoDB=build-demoDB.xml
file.omar-build-minDB=build-minDB.xml
file.omar-build-nb4=build-nb4.xml
file.omar-build-path=build-path.xml
file.omar-build-setup=build-setup.xml
file.omar-build-test=build-test.xml
file.omar-build-webstart=build-webstart.xml
file.omar-build-japex=build-japex.xml
file.omar-user-build=user-build.xml

#
# Following properties are for japex test tool
# For details see wiki: http://ebxmlrr.sourceforge.net/wiki/index.php/Dev/omar/test/system/japex#Installation
#
japex.home=${user.home}/japex

#
# The workspace containing optimized omar code
#
japex.workspace.optimized=.

#
# The workspace containing unOptimized omar code
#
japex.workspace.unOptimized=../../osws-clean/omar

#
# The omar.name for workpsace containing optimized omar code
#
japex.omarName.optimized=${omar.name}

#
# The omar.name for workpsace containing unOptimized omar code
#
japex.omarName.unOptimized=omar

#
# The url to server running with optimized omar code
#
japex.server.url.optimized=${omar.registry.baseurl}/soap

#
# The url to server running with  unOptimized omar code
#
japex.server.url.unOptimized=http://localhost:8080/omar/registry/soap

#
# Specify number of complete runs per driver.
#
japex.runsPerDriver=2
#
# Specify times / number iterations to warm up the VM without collecting data
#
japex.warmupTime=20
#japex.warmupIterations=5
#
# Not sure what does this yet.
# DEFAULT: true if japex.runsPerDriver is greater than 1, false otherwise,
#
japex.includeWarmupRun=
#
# Specify time / number iterations to while collecting data
#
japex.runTime=20
#japex.runIterations=5
#
# The number of threads running the test method
#
japex.numberOfThreads=1
#
# Specify directory for ouput report produced by japex
#
japex.reportsDirectory=${basedir}/reports/non-periodic
#
#
#
japex.resultUnit=tps

#
# Specify the type of chart
#
japex.chartType=barchart
#japex.chartType=linechart

#
# Jars needed by japex
#
file.japex.japex.jar=${japex.home}/lib/japex.jar
file.japex.jaxb-api.jar=${japex.home}/lib/jaxb-api.jar
file.japex.jaxb-impl.jar=${japex.home}/lib/jaxb-impl.jar
file.japex.jaxb-xjc.jar=${japex.home}/lib/jaxb-xjc.jar
file.japex.jaxb1-impl.jar=${japex.home}/lib/jaxb1-impl.jar
file.japex.jcommon.jar=${japex.home}/lib/jcommon-1.0.0-rc1.jar
file.japex.jfreechart.jar=${japex.home}/lib/jfreechart-1.0.0-rc1.jar

#
# Location of ebxmlrr-spec module from ebxmlrr CVS repository.
#
ebxmlrr-spec.home=../ebxmlrr-spec

#
# AppServer -dependent list of jar files to be excluded from build war files.
# Use a pattern from appserver-excludes.properties, if available.
# Default value is '${pattern.none.excludes}'
#
#appserver.excludes=

#
# Flag for including Registry Browser (Swing App) in the war w/ Java WebStart.
# Default to NOT include if property is not set.
# The URL to launch Registry Browser Java UI via webstart is:
#   http://<host>:<port>/<omar.name>/browser/jnlp/registryBrowser-jnlp.jsp
#war.includes.webstart=true

#
# SignJars configuration properties used by signjars targets.
# Default to Farrukh user/server keystore.
#omar.signjars.alias=
#omar.signjars.keyPassword=
#omar.signjars.keyStore=
#omar.signjars.keyStoreType=
#omar.signjars.keyStorePassword=

#
# Properties related to NetBeans IDE
#

#
# The JVM used by the profiler
#
#profiler.info.jvm=/usr/java/jdk1.5.0_04/bin/java

#
# The target used by profile-project target
#
netbeans.profile.project.target=nb5-profile-project
#
# The target used by profile-single target
#
netbeans.profile.single.target=nb5-profile-single
