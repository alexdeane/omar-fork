/*
 * ====================================================================
 *
 * This code is subject to the freebxml License, Version 1.1
 *
 * Copyright (c) 2001 - 2003 freebxml.org.  All rights reserved.
 *
 * $Header: /cvsroot/ebxmlrr/omar/test/org/freebxml/omar/common/security/X509ParserTest.java,v 1.2 2005/08/02 05:44:52 doballve Exp $
 * ====================================================================
 */
package org.freebxml.omar.common.security;

import java.net.URL;
import junit.framework.*;
import java.io.InputStream;
import java.security.cert.X509Certificate;


/**
 *
 * @author Diego Ballve / Digital Artefacts Europe
 */
public class X509ParserTest extends TestCase {
    
    public X509ParserTest(String testName) {
        super(testName);
    }

    protected void setUp() throws java.lang.Exception {
    }

    protected void tearDown() throws java.lang.Exception {
    }

    public static junit.framework.Test suite() {
        junit.framework.TestSuite suite = new junit.framework.TestSuite(X509ParserTest.class);
        
        return suite;
    }

    /**
     * Test of parseX509Certificate method, of class org.freebxml.omar.common.security.X509Parser.
     *
     * Tries a self signed certificate generated by "keytool -export"
     */
    public void testParseX509Certificate() throws Exception {
        System.out.println("testParseX509Certificate");
        URL certUrl = getClass().getResource("/resources/security/testuser-keytool-export.crt.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
        assertNotNull(x509Cert);
    }
    
    /**
     * Test of parseX509Certificate method, of class org.freebxml.omar.common.security.X509Parser.
     *
     * Tries a broke, self signed certificate generated by "keytool -export"
     */
    public void testParseX509Certificate_broken() throws Exception {
        System.out.println("testParseX509Certificate_broken");
        URL certUrl = getClass().getResource("/resources/security/testuser-keytool-export.crt.broken.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        try {
            X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
            fail("Certificate should not be parseable");
        } catch (Exception e) {
            // ok
        }
    }
    
    /**
     * Test of parseX509Certificate method, of class org.freebxml.omar.common.security.X509Parser.
     *
     * Tries a self signed certificate generated by "openssh x509" from a p12 keystore
     */
    public void testParseX509Certificate_openssh() throws Exception {
        System.out.println("testParseX509Certificate_openssh");
        URL certUrl = getClass().getResource("/resources/security/diego3-p12-openssh-x509.crt.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
        assertNotNull(x509Cert);
    }
    
}
