<?xml version = "1.0" encoding = "UTF-8"?>
<definitions targetNamespace="urn:your:urn:goes:here" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:lcm="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:query="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:rs="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="urn:your:urn:goes:here" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <documentation>
    $Header: /cvsroot/ebxmlrr/omar/test/org/freebxml/omar/server/profile/ws/wsdl/data/ebXMLRegistryInterfaces.wsdl,v 1.2 2006/04/13 02:29:30 psterk Exp $
    Author: Matt MacKenzie, Farrukh Najmi
    This is the the normative abstract interface definition in WSDL for the OASIS ebXML Registry services.
    This WSDL file defines the messages and portTypes needed to communicate with a compliant
    ebXML Registry.  It is abstract in that it does not define the bindings or services.  Examples
    of suitable bindings and services are defined in ebXMLRegistryBindings and ebXMLRegistryServices
    respectively.
  </documentation>
  <types>
    <xsd:schema>
      <!-- Import the rs.xsd, lcm.xsd and query.xsd. -->
      <xsd:import namespace="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" schemaLocation="./rs.xsd"/>
      <xsd:import namespace="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" schemaLocation="./lcm.xsd"/>
      <xsd:import namespace="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" schemaLocation="./query.xsd"/>
    </xsd:schema>
  </types>
  <!-- The Response message definition. -->
  <message name="msgRegistryResponse">
    <documentation>Defines a RegistryResponse message.</documentation>
    <part element="rs:RegistryResponse" name="partRegistryResponse"/>
    <!--
         mime:part for payload not included as cardinality is variable per AP 1.0:
         R2923 A SENDER MAY send non-root MIME parts not described in the WSDL MIME binding.
    -->
  </message>
  <!-- Request message definitions. -->
  <message name="msgUpdateObjectsRequest">
    <part element="lcm:UpdateObjectsRequest" name="partUpdateObjectsRequest"/>
    <!--
         mime:part for payload not included as cardinality is variable per AP 1.0:
         R2923 A SENDER MAY send non-root MIME parts not described in the WSDL MIME binding.
    -->
  </message>
  <message name="msgSubmitObjectsRequest">
    <part element="lcm:SubmitObjectsRequest" name="partSubmitObjectsRequest"/>
    <!--
         mime:part for payload not included as cardinality is variable per AP 1.0:
         R2923 A SENDER MAY send non-root MIME parts not described in the WSDL MIME binding.
    -->
  </message>
  <message name="msgDeprecateObjectsRequest">
    <part element="lcm:DeprecateObjectsRequest" name="partDeprecateObjectsRequest"/>
  </message>
  <message name="msgUndeprecateObjectsRequest">
    <part element="lcm:UndeprecateObjectsRequest" name="partUndeprecateObjectsRequest"/>
  </message>
  <message name="msgRemoveObjectsRequest">
    <part element="lcm:RemoveObjectsRequest" name="partRemoveObjectsRequest"/>
  </message>
  <message name="msgApproveObjectsRequest">
    <part element="lcm:ApproveObjectsRequest" name="partApproveObjectsRequest"/>
  </message>
  <message name="msgAdhocQueryRequest">
    <part element="query:AdhocQueryRequest" name="partAdhocQueryRequest"/>
  </message>
  <message name="msgAdhocQueryResponse">
    <part element="query:AdhocQueryResponse" name="partAdhocQueryResponse"/>
  </message>
  <!--
       Port Types
       A port type is a piece of markup which defines a class of methods, or in WSDL
       nomenclature, operations.  In object-oriented-ese, a portType maps to a class, and
       an operation maps to a method.
       
       Each operation has an input (parameter), and an output (return type).
  -->
  <portType name="TestQueryManagerPortType">
    <operation name="submitAdhocQuery">
      <input message="tns:msgAdhocQueryRequest"/>
      <output message="tns:msgAdhocQueryResponse"/>
    </operation>
  </portType>
  <portType name="TestLifeCycleManagerPortType">
    <operation name="approveObjects">
      <input message="tns:msgApproveObjectsRequest"/>
      <output message="tns:msgRegistryResponse"/>
    </operation>
    <operation name="deprecateObjects">
      <input message="tns:msgDeprecateObjectsRequest"/>
      <output message="tns:msgRegistryResponse"/>
    </operation>
    <operation name="undeprecateObjects">
      <input message="tns:msgUndeprecateObjectsRequest"/>
      <output message="tns:msgRegistryResponse"/>
    </operation>
    <operation name="removeObjects">
      <input message="tns:msgRemoveObjectsRequest"/>
      <output message="tns:msgRegistryResponse"/>
    </operation>
    <operation name="submitObjects">
      <input message="tns:msgSubmitObjectsRequest"/>
      <output message="tns:msgRegistryResponse"/>
    </operation>
    <operation name="updateObjects">
      <input message="tns:msgUpdateObjectsRequest"/>
      <output message="tns:msgUpdateObjectsRequest"/>
    </operation>
  </portType>
</definitions>
