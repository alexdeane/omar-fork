/*
 * ====================================================================
 *
 * This code is subject to the freebxml License, Version 1.1
 *
 * Copyright (c) 2001 - 2003 freebxml.org.  All rights reserved.
 *
 * $Header: /cvsroot/ebxmlrr/omar/src/java/org/freebxml/omar/common/security/X509Parser.java,v 1.2 2005/06/11 00:20:53 geomurr Exp $
 * ====================================================================
 */
package org.freebxml.omar.common.security;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Constructor;
import java.security.Provider;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.Iterator;
import javax.xml.registry.JAXRException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.freebxml.omar.common.CommonResourceBundle;

/**
 * A helper class for X509 Certificates.
 *
 * @author Diego Ballve / Digital Artefacts Europe
 */
public class X509Parser {
    
    private static final Log log = LogFactory.getLog(X509Parser.class);

    /**
     * Parses a X509Certificate from a DER formatted input stream. Uses the 
     * BouncyCastle provider if available.
     *
     * @param inStream The DER InputStream with the certificate.
     * @return X509Certificate parsed from stream.
     * @throws JAXRException in case of IOException or CertificateException
     *  while parsing the stream.
     */
    public static X509Certificate parseX509Certificate(InputStream inStream)
    throws JAXRException {
        try {
            //possible options
            // - der x509 generated by keytool -export
            // - der x509 generated by openssh x509 (might require BC provider)
            
            // Get the CertificateFactory to parse the stream
            // if BouncyCastle provider available, use it
            CertificateFactory cf;
            try {
                Class clazz = Class.forName("org.bouncycastle.jce.provider.BouncyCastleProvider");
                Constructor constructor = clazz.getConstructor(new Class[] {});
                Provider bcProvider = (Provider)constructor.newInstance(new Object[] {});
                Security.addProvider(bcProvider);
                cf = CertificateFactory.getInstance("X.509", "BC");
            } catch (Exception e) {
                // log error if bc present but failed to instanciate/add provider
                if (!(e instanceof ClassNotFoundException)) {
                    log.error(CommonResourceBundle.getInstance().getString("message.FailedToInstantiateBouncyCastleProvider"));
                }
                // fall back to default provider
                cf = CertificateFactory.getInstance("X.509");
            }

            // Read the stream to a local variable
            DataInputStream dis = new DataInputStream(inStream);
            byte[] bytes = new byte[dis.available()];
            dis.readFully(bytes);
            ByteArrayInputStream certStream = new ByteArrayInputStream(bytes);

            // Parse the cert stream
            int i = 0;
            Collection c = cf.generateCertificates(certStream) ;
            X509Certificate[] certs = new X509Certificate[c.toArray().length];
            for (Iterator it = c.iterator(); it.hasNext(); ){
                certs[i++] = (X509Certificate)it.next();
            }

            // Some logging..
            if (log.isDebugEnabled()) {
                if (c.size() == 1) {
                    log.debug("One certificate, no chain.");
                } else {
                    log.debug("Certificate chain length: " + c.size());
                }
                log.debug("Subject DN: " + certs[0].getSubjectDN().getName());
                log.debug("Issuer DN: " + certs[0].getIssuerDN().getName());
            }

            // Do we need to return the chain?
            // do we need to verify if cert is self signed / valid?
            return certs[0];
        } catch (CertificateException e) {
            String msg = CommonResourceBundle.getInstance().getString("message.parseX509CertificateStreamFailed",
                    new Object[] {e.getClass().getName(), e.getMessage()});
            throw new JAXRException(msg, e);
        } catch (IOException e) {
            String msg = CommonResourceBundle.getInstance().getString("message.parseX509CertificateStreamFailed",
                    new Object[] {e.getClass().getName(), e.getMessage()});
            throw new JAXRException(msg, e);
        } finally {
            try {
                inStream.close();
            } catch (IOException e) {}
        }
    }
    
}
