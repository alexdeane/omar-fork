// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.freebxml.omar.common.jaxrpc.registry.server;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.server.*;
import javax.xml.rpc.handler.HandlerInfo;
import com.sun.xml.rpc.client.HandlerChainImpl;

public class LifeCycleManagerPortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public LifeCycleManagerPortType_Tie() throws Exception {
        super(new org.freebxml.omar.common.jaxrpc.registry.server.EbXMLRegistrySOAPService_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: approveObjects
     */
    private void invoke_approveObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partRegistryResponse = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).approveObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partRegistryResponse;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns2_approveObjects_RegistryResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: removeObjects
     */
    private void invoke_removeObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partRegistryResponse = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).removeObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partRegistryResponse;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns2_removeObjects_RegistryResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: updateObjects
     */
    private void invoke_updateObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partUpdateObjectsRequest = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).updateObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partUpdateObjectsRequest;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_updateObjects_UpdateObjectsRequest_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns3_ns3_UpdateObjectsRequest_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: submitObjects
     */
    private void invoke_submitObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partRegistryResponse = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).submitObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partRegistryResponse;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns2_submitObjects_RegistryResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: undeprecateObjects
     */
    private void invoke_undeprecateObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partRegistryResponse = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).undeprecateObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partRegistryResponse;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns2_undeprecateObjects_RegistryResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: deprecateObjects
     */
    private void invoke_deprecateObjects(StreamingHandlerState state) throws Exception {
        
        javax.xml.soap.SOAPElement mySOAPElement = null;
        Object mySOAPElementObj =
            state.getRequest().getBody().getValue();
        
        if (mySOAPElementObj instanceof SOAPDeserializationState) {
            mySOAPElement = (javax.xml.soap.SOAPElement)((SOAPDeserializationState)mySOAPElementObj).getInstance();
        } else {
            mySOAPElement = (javax.xml.soap.SOAPElement)mySOAPElementObj;
        }
        
        try {
            javax.xml.soap.SOAPElement partRegistryResponse = ((org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType) getTarget()).deprecateObjects(mySOAPElement);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            javax.xml.soap.SOAPElement _response = partRegistryResponse;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns2_deprecateObjects_RegistryResponse_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns3_approveObjects_ApproveObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(approveObjects_OPCODE);
        }
        else if (bodyReader.getName().equals(ns3_removeObjects_RemoveObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(removeObjects_OPCODE);
        }
        else if (bodyReader.getName().equals(ns3_updateObjects_UpdateObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(updateObjects_OPCODE);
        }
        else if (bodyReader.getName().equals(ns3_submitObjects_SubmitObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(submitObjects_OPCODE);
        }
        else if (bodyReader.getName().equals(ns3_undeprecateObjects_UndeprecateObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(undeprecateObjects_OPCODE);
        }
        else if (bodyReader.getName().equals(ns3_deprecateObjects_DeprecateObjectsRequest_QNAME)) {
            state.getRequest().setOperationCode(deprecateObjects_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case approveObjects_OPCODE:
                deserialize_approveObjects(bodyReader, deserializationContext, state);
                break;
            case removeObjects_OPCODE:
                deserialize_removeObjects(bodyReader, deserializationContext, state);
                break;
            case updateObjects_OPCODE:
                deserialize_updateObjects(bodyReader, deserializationContext, state);
                break;
            case submitObjects_OPCODE:
                deserialize_submitObjects(bodyReader, deserializationContext, state);
                break;
            case undeprecateObjects_OPCODE:
                deserialize_undeprecateObjects(bodyReader, deserializationContext, state);
                break;
            case deprecateObjects_OPCODE:
                deserialize_deprecateObjects(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the approveObjects operation.
     */
    private void deserialize_approveObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer.deserialize(ns3_approveObjects_ApproveObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_approveObjects_ApproveObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the removeObjects operation.
     */
    private void deserialize_removeObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer.deserialize(ns3_removeObjects_RemoveObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_removeObjects_RemoveObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateObjects operation.
     */
    private void deserialize_updateObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns3_ns3_UpdateObjectsRequest_TYPE_QNAME_Serializer.deserialize(ns3_updateObjects_UpdateObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_updateObjects_UpdateObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the submitObjects operation.
     */
    private void deserialize_submitObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns3_ns3_SubmitObjectsRequest_TYPE_QNAME_Serializer.deserialize(ns3_submitObjects_SubmitObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_submitObjects_SubmitObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the undeprecateObjects operation.
     */
    private void deserialize_undeprecateObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer.deserialize(ns3_undeprecateObjects_UndeprecateObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_undeprecateObjects_UndeprecateObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deprecateObjects operation.
     */
    private void deserialize_deprecateObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mySOAPElementObj =
            ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer.deserialize(ns3_deprecateObjects_DeprecateObjectsRequest_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns3_deprecateObjects_DeprecateObjectsRequest_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case approveObjects_OPCODE:
                invoke_approveObjects(state);
                break;
            case removeObjects_OPCODE:
                invoke_removeObjects(state);
                break;
            case updateObjects_OPCODE:
                invoke_updateObjects(state);
                break;
            case submitObjects_OPCODE:
                invoke_submitObjects(state);
                break;
            case undeprecateObjects_OPCODE:
                invoke_undeprecateObjects(state);
                break;
            case deprecateObjects_OPCODE:
                invoke_deprecateObjects(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns3_approveObjects_ApproveObjectsRequest_QNAME)) {
            return approveObjects_OPCODE;
        }
        if (name.equals(ns3_removeObjects_RemoveObjectsRequest_QNAME)) {
            return removeObjects_OPCODE;
        }
        if (name.equals(ns3_updateObjects_UpdateObjectsRequest_QNAME)) {
            return updateObjects_OPCODE;
        }
        if (name.equals(ns3_submitObjects_SubmitObjectsRequest_QNAME)) {
            return submitObjects_OPCODE;
        }
        if (name.equals(ns3_undeprecateObjects_UndeprecateObjectsRequest_QNAME)) {
            return undeprecateObjects_OPCODE;
        }
        if (name.equals(ns3_deprecateObjects_DeprecateObjectsRequest_QNAME)) {
            return deprecateObjects_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case approveObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("approveObjects", carray);
                }
                break;
            
            case removeObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("removeObjects", carray);
                }
                break;
            
            case updateObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("updateObjects", carray);
                }
                break;
            
            case submitObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("submitObjects", carray);
                }
                break;
            
            case undeprecateObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("undeprecateObjects", carray);
                }
                break;
            
            case deprecateObjects_OPCODE:
                {
                    Class[] carray = { javax.xml.soap.SOAPElement.class };
                    theMethod = (org.freebxml.omar.common.jaxrpc.registry.server.LifeCycleManagerPortType.class).getMethod("deprecateObjects", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[6];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 6 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    
    protected boolean preHandlingHook(StreamingHandlerState state) throws Exception {
        boolean bool = false;
        bool = super.preHandlingHook(state);
        return bool;
    }
    
    
    protected void postResponseWritingHook(StreamingHandlerState state) throws Exception {
        super.postResponseWritingHook(state);
    }
    
    
    protected void postEnvelopeReadingHook(StreamingHandlerState state) throws Exception {
        super.postEnvelopeReadingHook(state);
        switch (state.getRequest().getOperationCode()) {
            case updateObjects_OPCODE:
                getNonExplicitAttachment(state);
                break;
            case submitObjects_OPCODE:
                getNonExplicitAttachment(state);
                break;
        }
    }
    private void getNonExplicitAttachment(StreamingHandlerState state) throws Exception {
        javax.xml.rpc.handler.soap.SOAPMessageContext smc = state.getMessageContext();
        javax.xml.soap.SOAPMessage message = state.getRequest().getMessage();
        java.util.ArrayList attachments = null;
        for(java.util.Iterator iter = message.getAttachments(); iter.hasNext();) {
            if(attachments == null) {
                attachments = new java.util.ArrayList();
            }
            attachments.add(iter.next());
        }
        smc.setProperty(com.sun.xml.rpc.server.ServerPropertyConstants.GET_ATTACHMENT_PROPERTY, attachments);
    }
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_ns3_UpdateObjectsRequest_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns3_UpdateObjectsRequest_TYPE_QNAME);
        ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_AdhocQueryRequest_TYPE_QNAME);
        ns3_ns3_SubmitObjectsRequest_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns3_SubmitObjectsRequest_TYPE_QNAME);
        ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns2_RegistryResponseType_TYPE_QNAME);
    }
    
    private static final QName portName = new QName("urn:your:urn:goes:here", "LifeCycleManagerPort");
    private static final int approveObjects_OPCODE = 0;
    private static final int removeObjects_OPCODE = 1;
    private static final int updateObjects_OPCODE = 2;
    private static final int submitObjects_OPCODE = 3;
    private static final int undeprecateObjects_OPCODE = 4;
    private static final int deprecateObjects_OPCODE = 5;
    private static final QName ns3_approveObjects_ApproveObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "ApproveObjectsRequest");
    private static final QName ns1_AdhocQueryRequest_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0", "AdhocQueryRequest");
    private CombinedSerializer ns1_ns1_AdhocQueryRequest_TYPE_QNAME_Serializer;
    private static final QName ns2_approveObjects_RegistryResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponse");
    private static final QName ns2_RegistryResponseType_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponseType");
    private CombinedSerializer ns2_ns2_RegistryResponseType_TYPE_QNAME_Serializer;
    private static final QName ns3_removeObjects_RemoveObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "RemoveObjectsRequest");
    private static final QName ns2_removeObjects_RegistryResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponse");
    private static final QName ns3_updateObjects_UpdateObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "UpdateObjectsRequest");
    private static final QName ns3_UpdateObjectsRequest_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "UpdateObjectsRequest");
    private CombinedSerializer ns3_ns3_UpdateObjectsRequest_TYPE_QNAME_Serializer;
    private static final QName ns3_submitObjects_SubmitObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "SubmitObjectsRequest");
    private static final QName ns3_SubmitObjectsRequest_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "SubmitObjectsRequest");
    private CombinedSerializer ns3_ns3_SubmitObjectsRequest_TYPE_QNAME_Serializer;
    private static final QName ns2_submitObjects_RegistryResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponse");
    private static final QName ns3_undeprecateObjects_UndeprecateObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "UndeprecateObjectsRequest");
    private static final QName ns2_undeprecateObjects_RegistryResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponse");
    private static final QName ns3_deprecateObjects_DeprecateObjectsRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0", "DeprecateObjectsRequest");
    private static final QName ns2_deprecateObjects_RegistryResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0", "RegistryResponse");
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
