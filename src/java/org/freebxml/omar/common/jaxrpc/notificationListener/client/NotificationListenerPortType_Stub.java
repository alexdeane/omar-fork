// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2, build R23)
// Generated source version: 1.1.2

package org.freebxml.omar.common.jaxrpc.notificationListener.client;
import org.freebxml.omar.common.CommonResourceBundle;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class NotificationListenerPortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.freebxml.omar.common.jaxrpc.notificationListener.client.NotificationListenerPortType {
    
    protected static CommonResourceBundle resourceBundle = CommonResourceBundle.getInstance();
    
    
    /*
     *  public constructor
     */
    public NotificationListenerPortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://your.server.com/soap");
    }
    
    
    /*
     *  implementation of onObjectRefsNotification
     */
    public void onObjectRefsNotification(javax.xml.soap.SOAPElement body)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(onObjectRefsNotification_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_onObjectRefsNotification_ObjectRefsNotification_QNAME);
            _bodyBlock.setValue(body);
            _bodyBlock.setSerializer(ns1_ns1_ObjectRefsNotification_TYPE_QNAME_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:oasis:names:tc:ebxml-regrep:wsdl:NotificationListener:bindings:3.0:NotificationListenerPortType:onObjectRefsNotification");
            
            _sendOneWay((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            } catch (RemoteException e) {
                // let this one through unchanged
                throw e;
            } catch (JAXRPCException e) {
                throw new RemoteException(e.getMessage(), e);
            } catch (Exception e) {
                if (e instanceof RuntimeException) {
                    throw (RuntimeException)e;
                } else {
                    throw new RemoteException(e.getMessage(), e);
                }
            }
        }
        
        /*
         *  implementation of onObjectsNotification
         */
        public void onObjectsNotification(javax.xml.soap.SOAPElement body)
            throws java.rmi.RemoteException {
            
            try {
                
                StreamingSenderState _state = _start(_handlerChain);
                
                InternalSOAPMessage _request = _state.getRequest();
                _request.setOperationCode(onObjectsNotification_OPCODE);
                
                
                SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_onObjectsNotification_ObjectsNotification_QNAME);
                _bodyBlock.setValue(body);
                _bodyBlock.setSerializer(ns1_ns1_ObjectsNotificationType_TYPE_QNAME_Serializer);
                _request.setBody(_bodyBlock);
                
                _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:oasis:names:tc:ebxml-regrep:wsdl:NotificationListener:bindings:3.0:NotificationListenerPortType:onObjectsNotification");
                
                _sendOneWay((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
                
                } catch (RemoteException e) {
                    // let this one through unchanged
                    throw e;
                } catch (JAXRPCException e) {
                    throw new RemoteException(e.getMessage(), e);
                } catch (Exception e) {
                    if (e instanceof RuntimeException) {
                        throw (RuntimeException)e;
                    } else {
                        throw new RemoteException(e.getMessage(), e);
                    }
                }
            }
            
            
            /*
             *  this method deserializes the request/response structure in the body
             */
            protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
                int opcode = state.getRequest().getOperationCode();
                switch (opcode) {
                    default:
                        throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
                }
            }
            
            
            
            
            
            
            
            protected String _getDefaultEnvelopeEncodingStyle() {
                return null;
            }
            
            public String _getImplicitEnvelopeEncodingStyle() {
                return "";
            }
            
            public String _getEncodingStyle() {
                return SOAPNamespaceConstants.ENCODING;
            }
            
            public void _setEncodingStyle(String encodingStyle) {
                throw new UnsupportedOperationException(resourceBundle.getString("message.encodingStyle"));
            }
            
            
            
            
            
            /*
             * This method returns an array containing (prefix, nsURI) pairs.
             */
            protected String[] _getNamespaceDeclarations() {
                return myNamespace_declarations;
            }
            
            /*
             * This method returns an array containing the names of the headers we understand.
             */
            public QName[] _getUnderstoodHeaders() {
                return understoodHeaderNames;
            }
            
            
            protected void _preHandlingHook(StreamingSenderState state) throws Exception {
                super._preHandlingHook(state);
            }
            
            
            protected boolean _preRequestSendingHook(StreamingSenderState state) throws Exception {
                boolean bool = false;
                bool = super._preRequestSendingHook(state);
                return bool;
            }
            
            public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
                super._initialize(registry);
                ns1_ns1_ObjectRefsNotification_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_ObjectRefsNotification_TYPE_QNAME);
                ns1_ns1_ObjectsNotificationType_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_ObjectsNotificationType_TYPE_QNAME);
            }
            
            private static final QName _portName = new QName("urn:your:urn:goes:here", "NotificationListenerPort");
            private static final int onObjectRefsNotification_OPCODE = 0;
            private static final int onObjectsNotification_OPCODE = 1;
            private static final QName ns1_onObjectRefsNotification_ObjectRefsNotification_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0", "ObjectRefsNotification");
            private static final QName ns1_ObjectRefsNotification_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0", "ObjectRefsNotification");
            private CombinedSerializer ns1_ns1_ObjectRefsNotification_TYPE_QNAME_Serializer;
            private static final QName ns1_onObjectsNotification_ObjectsNotification_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0", "ObjectsNotification");
            private static final QName ns1_ObjectsNotificationType_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0", "ObjectsNotificationType");
            private CombinedSerializer ns1_ns1_ObjectsNotificationType_TYPE_QNAME_Serializer;
            private static final String[] myNamespace_declarations =
                                                new String[] {
                                                    "ns0", "urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0"
                                                };
            
            private static final QName[] understoodHeaderNames = new QName[] {  };
        }
