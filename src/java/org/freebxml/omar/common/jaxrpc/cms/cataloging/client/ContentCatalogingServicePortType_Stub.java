// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.freebxml.omar.common.jaxrpc.cms.cataloging.client;
import org.freebxml.omar.common.CommonResourceBundle;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class ContentCatalogingServicePortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.freebxml.omar.common.jaxrpc.cms.cataloging.client.ContentCatalogingServicePortType {
    
    protected static CommonResourceBundle resourceBundle = CommonResourceBundle.getInstance();
    
    
    /*
     *  public constructor
     */
    public ContentCatalogingServicePortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://your.server.com/soap");
    }
    
    
    /*
     *  implementation of catalogContent
     */
    public javax.xml.soap.SOAPElement catalogContent(javax.xml.soap.SOAPElement partCatalogContentRequest)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(catalogContent_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_catalogContent_CatalogContentRequest_QNAME);
            _bodyBlock.setValue(partCatalogContentRequest);
            _bodyBlock.setSerializer(ns1_ns1_CatalogContentRequest_TYPE_QNAME_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "urn:oasis:names:tc:ebxml-regrep:wsdl:cms:bindings:3.0:ContentCatalogingService#catalogContent");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            javax.xml.soap.SOAPElement _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (javax.xml.soap.SOAPElement)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (javax.xml.soap.SOAPElement)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case catalogContent_OPCODE:
                _deserialize_catalogContent(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the catalogContent operation.
     */
    private void _deserialize_catalogContent(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object mySOAPElementObj =
            ns1_ns1_CatalogContentResponse_TYPE_QNAME_Serializer.deserialize(ns1_catalogContent_CatalogContentResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_catalogContent_CatalogContentResponse_QNAME);
        bodyBlock.setValue(mySOAPElementObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException(resourceBundle.getString("message.encodingStyle"));
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    protected void _preSendingHook(StreamingSenderState state) throws Exception {
        super._preSendingHook(state);
        switch (state.getRequest().getOperationCode()) {
            case catalogContent_OPCODE:
                addNonExplicitAttachment(state);
                break;
        }
    }
    
    
    private void addNonExplicitAttachment(StreamingSenderState state) throws Exception {
        javax.xml.rpc.handler.soap.SOAPMessageContext smc = state.getMessageContext();
        javax.xml.soap.SOAPMessage message = state.getRequest().getMessage();
        Object c = _getProperty(StubPropertyConstants.SET_ATTACHMENT_PROPERTY);
        _setProperty(StubPropertyConstants.SET_ATTACHMENT_PROPERTY, null);
        if(c != null && c instanceof java.util.Collection) {
            for(java.util.Iterator iter = ((java.util.Collection)c).iterator(); iter.hasNext();) {
                Object attachment = iter.next();
                if(attachment instanceof javax.xml.soap.AttachmentPart) {
                    message.addAttachmentPart((javax.xml.soap.AttachmentPart)attachment);
                }
            }
        }
    }
    
    
    protected void _postSendingHook(StreamingSenderState state) throws Exception {
        super._postSendingHook(state);
        switch (state.getRequest().getOperationCode()) {
            case catalogContent_OPCODE:
                getNonExplicitAttachment(state);
                break;
        }
    }
    
    
    private void getNonExplicitAttachment(StreamingSenderState state) throws Exception {
        javax.xml.rpc.handler.soap.SOAPMessageContext smc = state.getMessageContext();
        javax.xml.soap.SOAPMessage message = state.getResponse().getMessage();
        java.util.ArrayList attachments = null;
        java.util.Iterator iter = message.getAttachments();
        while(iter.hasNext()) {
            if(attachments == null) {
                attachments = new java.util.ArrayList();
            }
            attachments.add(iter.next());
        }
        _setProperty(StubPropertyConstants.GET_ATTACHMENT_PROPERTY, attachments);
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_ns1_CatalogContentRequest_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_CatalogContentRequest_TYPE_QNAME);
        ns1_ns1_CatalogContentResponse_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_CatalogContentResponse_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("urn:your:urn:goes:here", "ContentCatalogingServicePort");
    private static final int catalogContent_OPCODE = 0;
    private static final QName ns1_catalogContent_CatalogContentRequest_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:cms:3.0", "CatalogContentRequest");
    private static final QName ns1_CatalogContentRequest_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:cms:3.0", "CatalogContentRequest");
    private CombinedSerializer ns1_ns1_CatalogContentRequest_TYPE_QNAME_Serializer;
    private static final QName ns1_catalogContent_CatalogContentResponse_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:cms:3.0", "CatalogContentResponse");
    private static final QName ns1_CatalogContentResponse_TYPE_QNAME = new QName("urn:oasis:names:tc:ebxml-regrep:xsd:cms:3.0", "CatalogContentResponse");
    private CombinedSerializer ns1_ns1_CatalogContentResponse_TYPE_QNAME_Serializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:oasis:names:tc:ebxml-regrep:xsd:cms:3.0"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
