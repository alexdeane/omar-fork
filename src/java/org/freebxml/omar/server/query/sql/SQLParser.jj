/**
 * $Header: /cvsroot/ebxmlrr/omar/src/java/org/freebxml/omar/server/query/sql/SQLParser.jj,v 1.26 2007/03/21 14:24:34 farrukh_najmi Exp $
 *
 * Subset of SQL-92 used by Registry Query syntax
 *
 */
options {
DEBUG_PARSER=false;
// FORCE_LA_CHECK=true;
IGNORE_CASE=true;
UNICODE_INPUT=true;
}


PARSER_BEGIN(SQLParser)

package org.freebxml.omar.server.query.sql;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Iterator;

import org.freebxml.omar.common.BindingUtility;
import org.freebxml.omar.server.persistence.PersistenceManager;
import org.freebxml.omar.server.persistence.PersistenceManagerFactory;
import org.oasis.ebxml.registry.bindings.query.ResponseOptionType;
import org.oasis.ebxml.registry.bindings.query.ReturnType;
import org.oasis.ebxml.registry.bindings.rim.UserType;

/**
 * Based on grammar by Kevin (mailto:kevinh@empower.com.au) at: http://www.cobase.cs.ucla.edu/pub/javacc/sql-oracle.jj
 */
class SQLParser {

	PersistenceManager pm = PersistenceManagerFactory.getInstance().getPersistenceManager();

	private ResponseOptionType responseOption = null;
	public String firstTableName = null;
	public HashMap aliasToTableNameMap = new HashMap();
	public String selectColName = null;
	public String selectColAlias = null;
	public String selectColAndAlias = null;

	private static HashMap collectionAttributeMap = new HashMap();
	private boolean inINClause = false;

	private boolean beginAssocQuery = false;
	private UserType user = null;

	static {
		//FROM RIM: All attributes made lower case for case insensitive comparison
		collectionAttributeMap.put("associatedobjects", null);
		collectionAttributeMap.put("audittrail", null);
		collectionAttributeMap.put("classificationnodes", null);
		collectionAttributeMap.put("externallinks", null);
		collectionAttributeMap.put("packages", null);
		collectionAttributeMap.put("memberobjects", null);
		collectionAttributeMap.put("classifiedobjects", null);
		collectionAttributeMap.put("permissions", null);
		collectionAttributeMap.put("privileges", null);
		collectionAttributeMap.put("privilegeattributes", null);
		collectionAttributeMap.put("groups", null);
		collectionAttributeMap.put("identities", null);
		collectionAttributeMap.put("roles", null);
	}

	private String getSelectColumn(String idName) {
		String selectCol = idName;

		int index = idName.indexOf('.');

		if ((!inINClause) && (index == -1)  ) {

			if (responseOption.getReturnType() == ReturnType.OBJECT_REF) {
				selectCol = "id";
			}
			else {
				selectCol = "*";
			}
		}

		return selectCol;
	}

	private String getAttributeNameFromColRef(String colRef) {
		String attributeName = null;

		//Get the last path element
		int lastPeriodIndex = colRef.lastIndexOf('.');
		attributeName = colRef.substring(lastPeriodIndex+1);

		return attributeName.toLowerCase();
	}

	private boolean isPrimitiveAttribute(String colRef) {
		boolean primitiveAttribute = true;

		String attributeName = getAttributeNameFromColRef(colRef);

		if (collectionAttributeMap.containsKey(attributeName)) {
			primitiveAttribute = false;
		}

		//System.err.println("attributeName='" + attributeName + "' isPrimitiveAttribute=" + primitiveAttribute);

		return primitiveAttribute;
	}

	private String mapCollectionAttributeToIdList(String attributeName) {
		String idList = "1, 2, 3, 4, 5";



		return idList;
	}

        private String pruneUnusedTableRefs(String oldStr) {
            String newStr = oldStr;

            Set aliases = aliasToTableNameMap.keySet();
            Iterator iter = aliases.iterator();
            while (iter.hasNext()) {
                String alias = (String)iter.next();
                String tableName = (String)aliasToTableNameMap.get(alias);

                if (!(tableName.equals(firstTableName))) {

                    //See if "alias." missing in oldStr. If so need to prune tableref
                    boolean keepTableRef = oldStr.matches(".*"+alias+ "\\s*\\..*");

                    if (!keepTableRef) {
                        if (oldStr.matches(".*"+tableName+"\\s*" + alias + "\\s*\\,.*")) {
                            newStr = newStr.replaceAll(tableName+"\\s*" + alias + "\\s*\\,", " ");
                        } else if (oldStr.matches(".*"+tableName+"\\s*" + alias + "\\s*.*")) {
                            newStr = newStr.replaceAll(tableName+"\\s*" + alias + "\\s*", " ");
                        }
                    }
                }
            }

            //Handle case where trailing "," left before WHERE
            newStr = newStr.replaceAll(",\\s*WHERE", " WHERE ");

            return newStr;
        }

}


PARSER_END(SQLParser)


/***********************************************************************
 * Token definitions
 ***********************************************************************/


SKIP:
{
    " "
  | "\n"
  | "\r"
  | "\t"
}


SKIP:
{
  <COMMENT_LINE: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}


SKIP:
{
  <COMMENT_BLOCK: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


TOKEN:  /* Keywords */
{
    < ALL: "all" >
  | < AND: "and" >
  | < ASC: "asc" >
  | < BETWEEN: "between" >
  | < BY: "by" >
  | < DESC: "desc" >
  | < DISTINCT: "distinct" >
  | < EXISTS: "exists" >
  | < FROM: "from" >
  | < GROUP: "group" >
  | < HAVING: "having" >
  | < IN: "in" >
  | < IS: "is" >
  | < LIKE: "like" >
  | < NOT: "not" >
  | < NULL: "null" >
  | < OR: "or" >
  | < ORDER: "order" >
  | < SELECT: "select" >
  | < SPACES: "spaces" >
  | < SUM: "sum" >
  | < UNION: "union" >
  | < WHERE: "where" >
  | < ZERO: "zero" >
  | < ZEROS: "zeros" >

}

TOKEN:  /* Literals */
{
    < INTEGER_LITERAL: (["0"-"9"])+ >
  | < FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
        | (["0"-"9"])+ (<EXPONENT>)?
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < STRING_LITERAL: "'" (~["'"])* ( "''" (~["'"])* )* "'" >
}


TOKEN:  /* Identifiers */
{
    // SQL92 Identifier though we do not support names in double quotes
    < ID: <LETTER> ( "_" | <DIGIT> | <LETTER> )* >
    // [ebRS], 6.3.1.1 plus '.' (an extension used in WS Profile) and '_'
  | < VARIABLE: "$" <LETTER> ( "." | "_" | <DIGIT> | <LETTER> )* >
  | < #LETTER: ["A"-"Z", "a"-"z"] >
  | < #DIGIT: ["0"-"9"] >
}


TOKEN:  /* Separators and operators */
{
    < SEMICOLON: ";" >
  | < DOT: "." >
  | < LESS: "<" >
  | < LESSEQUAL: "<=" >
  | < GREATER: ">" >
  | < GREATEREQUAL: ">=" >
  | < EQUAL: "=" >
  | < NOTEQUAL: "!=" >
  | < NOTEQUAL2: "<>" >
  | < OPENPAREN: "(" >
  | < CLOSEPAREN: ")" >
  | < ASTERISK: "*" >
  | < SLASH: "/" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < QUESTIONMARK: "?" >
  | < PIPES: "||" >
}



/*******************************************************************
 * The Registry Query (Subset of SQL-92) grammar starts here
 *******************************************************************/

String processQuery(UserType user, ResponseOptionType responseOption) :
{
	this.responseOption = responseOption;
	String rs = new String("");
	this.user = user;
}
{
        rs = query_exp() [<SEMICOLON>] <EOF>
	{
            return rs;
	}
}

String query_exp() :
{ String rs = new String(""), ts; }
{
  (
  ts = query_term() {rs = rs + ts; }
  [<UNION> { rs = rs + "UNION"; } [<ALL> { rs = rs + "ALL"; }] ts = query_term() {rs = rs + ts; }]
  )
  {
    return rs;
  }
}

String query_term() :
{ String rs = new String(""), ts; }
{
  (
  ts = SQLSelect()  {rs = rs + ts; }
  | "(" { rs = rs + " ( "; } ts = query_exp() {rs = rs + ts;}  ")" { rs = rs + " ) "; }
  )
  {
    return rs;
  }
}

String SQLSelect() :
{ String rs = new String(""), ts; }
{
  <SELECT>
  {
	rs = " SELECT ";
  }
  ts = SQLSelectCols()
  {
  	rs = rs + ts;
  }
  <FROM>
  {
  	rs = rs + " FROM ";
  }
  ts = SQLTableList() { rs = rs + ts; }
  [ ts = SQLWhere()   { rs = rs + ts; } ]
  [ ts = SQLOrderBy()   { rs = rs + ts; } ]
  {
        rs = pruneUnusedTableRefs(rs);
	return rs;
  }
}


String SQLSelectCols() :
{
  String idName=null;
  String rs = new String("");
}
{
  ( <ALL> { rs = rs + " ALL "; }
  | <DISTINCT> { rs = rs + " DISTINCT "; }
  )*
  ( (
  	  "*" { idName = "*";}
        | LOOKAHEAD(2) idName = SQLFunction()
	| idName = SQLLvalueTerm()
	)
  	{
		selectColAndAlias = idName;
		int index = idName.indexOf('.');
		if (index == -1) {
			selectColName = idName;
			selectColAlias = null;
		}
		else {
			selectColName = idName.substring(index+1, idName.length());
			selectColAlias = idName.substring(0, index);
		}
		/*
		if ((!(selectColName.equalsIgnoreCase("id") || (selectColName.equalsIgnoreCase("*")) ) {
			throw new ParseException("Invalid select column '" + selectColName + "'. The only select columns allowed is 'id' or '*'.");
		}
		*/
  	}
  )
  {
	String selectCol = getSelectColumn(idName);
	rs = rs + selectCol + " ";

  	return rs;
  }
}


String SQLTableList() :
{ String rs = new String(""), ts; }
{
  ts = SQLTableRef() { rs = rs + ts; }
  ( LOOKAHEAD(2) "," { rs = rs + ", "; }
  ts = SQLTableRef() { rs = rs + ts; } )*
  { return rs; }
}



String SQLTableRef() :
{
	Token tableName;
	Token aliasName;
	String rs = new String("");

	String tableNameStr=null;
	String aliasNameStr=null;
}
{
  (
  tableName = <ID>
  {
  	tableNameStr = tableName.image;

	//Be forgiving to those that use the infomodel class name rather than the
	//SQL table name which had to be different due to the name being a reserved word in SQL
	tableNameStr = org.freebxml.omar.common.Utility.getInstance().mapTableName(tableNameStr);

	//Special case processing for extramural Associations
	if (tableNameStr.equalsIgnoreCase("Association")) {
		//??beginAssocQuery = true;
	}

  	rs = rs + tableNameStr + " ";
  }
  [ aliasName = <ID>
  {
  	aliasNameStr = aliasName.image;
	rs = rs + aliasName.image + " ";
  }
  ]
  )
  {
	if (firstTableName == null) {
		firstTableName = tableNameStr;
	}
	if ((aliasNameStr != null) && (aliasNameStr.length() > 0)) {
                //System.err.println("Adding aliasNameStr=" + aliasNameStr + " tableNameStr=" + tableNameStr);
		aliasToTableNameMap.put(aliasNameStr, tableNameStr);
	}
  	return rs.trim();
  }

}

String SQLWhere() :
{ String rs = new String(""), ts; }
{
  <WHERE>
  {
        rs = rs + " WHERE ";
  }
  ts = SQLOrExpr()
  {
  	rs = rs + ts;
	return rs;
  }
}

String SQLOrExpr() :
{ String rs = new String(""), ts;}
{
  ts = SQLAndExpr() { rs = rs + ts; }
  ( <OR>
	{
	  rs = rs + " OR ";
    }
    ts = SQLAndExpr()
    {
        rs = rs + ts;
    }
  )*
  { return rs; }
}

String SQLAndExpr() :
{ String rs = new String(""), ts; }
{
  (
      try {
        ts = SQLNotExpr()
        {
            rs = rs + ts;
            //System.err.println("    SQLNotExpr()=" + ts);
        }
      } catch (PrunePredicateException e) {
	// TODO: This module is missing a logger...
        e.printStackTrace();    //Should not happen
      }
      (
        try {
            <AND>
            ts = SQLNotExpr()
            {
                rs = rs + " AND " + ts;
                //System.err.println("<AND> SQLNotExpr()= AND " + ts);
            }
        } catch (PrunePredicateException e) {
            //Prune the "AND SQLNotExpr()"
            //System.err.println("AND SQLNotExpr() Pruned out...");
        }
      )*
  )
  {
    //System.err.println("SQLAndExpr()=" + rs);
    return rs;
  }
}

String SQLNotExpr() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
  [ <NOT>
	{
	  rs = rs + " NOT ";
	}
  ]
  ts = SQLCompareExpr()
  {
	rs = rs + ts;
	return rs;
  }
}

String SQLCompareExpr() throws PrunePredicateException :
{
  String rs = new String(""), ts;
}
{
  (
    LOOKAHEAD(SQLColRef() <IS>) ts = SQLIsClause() { rs = rs + ts; }
  | ts = SQLSumExpr() { rs = rs + ts; } [ ts = SQLCompareExprRight() { rs = rs + ts; } ]
  )
  {
    return rs;
  }
}

String SQLCompareExprRight() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
  (
    LOOKAHEAD(2) ts = SQLLikeClause() { rs = rs + ts; }
  | ts = SQLInClause() { rs = rs + ts; }
  | ts = SQLCompareOp() { rs = rs + ts; }
    ts = SQLSumExpr() { rs = rs + ts; }
  )
	{ return rs; }
}

String SQLCompareOp() :
{ String rs = new String("");}
{
  (
    <EQUAL>	   { rs = rs + " = "; }
  | <NOTEQUAL>     { rs = rs + " <> "; }
  | <NOTEQUAL2>    { rs = rs + " <> "; }
  | <GREATER>      { rs = rs + " > "; }
  | <GREATEREQUAL> { rs = rs + " >= "; }
  | <LESS>         { rs = rs + " < "; }
  | <LESSEQUAL>    { rs = rs + " <= "; }
  )
  { return rs; }
}

String SQLFunction() :
{ 
Token functionName;
String rs = new String(""), ts; 
}
{
  ( ( 
      functionName = <ID> { rs = rs + " " + functionName.image; }
    )
    try {
        ts = SQLFunctionArgs() { rs = rs + ts; }
    } catch (PrunePredicateException e) {
	// TODO: This module is missing a logger...
        e.printStackTrace(); //Should not happen
    }
  )
  { return rs; }
}

String SQLFunctionArgs() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
  <OPENPAREN> { rs = rs + "( "; }
  [ ts = SQLSumExpr() { rs = rs + ts; }
    ( "," { rs = rs + ", "; }
          ts = SQLSumExpr() { rs = rs + ts; } )*
  ]
  <CLOSEPAREN> { rs = rs + " ) "; return rs; }
}

String SQLInClause() :
{ String rs = new String(""), ts; }
{
  [ <NOT> { rs = rs + " NOT "; } ]
  <IN> { rs = rs + " IN "; }
  "(" { rs = rs + "( "; inINClause = true;}
  ts = SQLLValueListOrProcedureCall() { rs = rs + ts; }
  ")" { rs = rs + ") "; inINClause = true;}

  { return rs; }
}

String SQLLValueListOrProcedureCall() :
{ String rs = new String(""), ts; }
{
  (
  LOOKAHEAD(2) ts = ProcedureCall() { rs = rs + ts; }
  | ts = SQLLValueList() { rs = rs + ts; }
  )
  { return rs; }
}

String ProcedureCall() :
{
String rs = new String("");
Token procName = null;
Token param = null;
}
{

  procName = <ID> "(" param = <STRING_LITERAL> ")" { }
  {
  	String id = param.image.substring(1, param.image.length()-1);

	String sqlQuery = null;
	String tableName = null;

	if (procName.image.equalsIgnoreCase("RegistryObject_auditTrail")) {
		sqlQuery = "SELECT id FROM AuditableEvent ae, AffectedObject ao WHERE ao.id = '" + id + "' AND ao.eventId = ae.id ";
  		tableName = "AuditableEvent";
  	}
	else if (procName.image.equalsIgnoreCase("RegistryObject_externalLinks")) {
		sqlQuery = "SELECT sourceObject FROM Association WHERE associationType = 'ExternallyLinks' AND targetObject = '" + id + "' ";
		tableName = "Association";
	}
	else if (procName.image.equalsIgnoreCase("RegistryObject_externalIdentifiers")) {
		sqlQuery = "SELECT id FROM ExternalIdentifier WHERE registryObject = '" + id + "' ";
		tableName = "ExternalIdentifier";
	}
	else if (procName.image.equalsIgnoreCase("RegistryObject_classifications")) {
		sqlQuery = "SELECT id FROM Classification WHERE classifiedObject = '" + id + "' ";
		tableName = "Classification";
	}
	else if (procName.image.equalsIgnoreCase("RegistryObject_registryPackages")) {
		sqlQuery = "SELECT sourceObject FROM Association WHERE associationType = 'HasMember' AND targetObject = '" + id + "' ";
		tableName = "Association";
	}
	else if (procName.image.equalsIgnoreCase("RegistryPackage_memberObjects")) {
		sqlQuery = "SELECT targetObject FROM Association WHERE associationType = 'HasMember' AND sourceObject = '" + id + "' ";
		tableName = "Association";
	}
	else if (procName.image.equalsIgnoreCase("ExternalLink_linkedObjects")) {
		sqlQuery = "SELECT targetObject FROM Association WHERE associationType = 'ExternallyLinks' AND sourceObject = '" + id + "' ";
		tableName = "Association";
	}
	else if (procName.image.equalsIgnoreCase("ClassificationNode_classifiedObjects")) {
		sqlQuery = "SELECT classifiedObject FROM ClassificationNode WHERE id = '" + id + "' ";
		tableName = "Association";
	}
	else {
		throw new ParseException("Invalid stored procedure name " + procName.image);
	}

	/*
	ResponseOption responseOption = new ResponseOption();
	responseOption.setReturnType(ReturnType.OBJECT_REF);
	responseOption.setReturnComposedObjects(false);

	ArrayList ids = null;
	try {
		ids = org.freebxml.omar.server.common.Utility.getInstance().executeSQLQuery(sqlQuery, responseOption, tableName);
	}
	catch (RegistryException e) {
		// TODO: This module is missing a logger...
		e.printStackTrace();
		throw new ParseException(e.toString());
	}

	Iterator iter = ids.iterator();

	while(iter.hasNext()) {
		ObjectRef or = (ObjectRef)iter.next();
		String id_ = or.getId();

		if (iter.hasNext()) {
			rs = rs + "'" + id_ + "', ";
		}
		else {
			rs = rs + "'" + id_ + "' ";
		}
	}
	*/

	rs = sqlQuery;

	return rs;
  }
}

String SQLLValueList() :
{ String rs = new String(""), ts; }
{
  ts = SQLLValueElement() { rs = rs + ts; }
  ( ","
	{
	  rs = rs + ", ";
	}
    ts = SQLLValueElement() { rs = rs + ts; }
  )*
  { return rs; }
}

String SQLLValueElement() :
{ String rs = new String(""), ts; }
{
  (
    <NULL> { rs = rs + " NULL "; }
  |
    try {
        ts = SQLSumExpr() { rs = rs + ts; }
    } catch (PrunePredicateException e) {
	// TODO: This module is missing a logger...
        e.printStackTrace(); //Should not happen
    }
  | ts = SQLSelect() { rs = rs + ts; }
  )
  { return rs; }
}

String SQLIsClause() :
{ String rs = new String(""), ts; }
{
  ts = SQLColRef()
  {
  	rs = rs + ts;
  }
  <IS> { rs = rs + " IS "; }
  [ <NOT> { rs = rs + " NOT "; } ]
  <NULL> { rs = rs + " NULL "; }
  { return rs; }
}

String SQLLikeClause() :
{ String rs = new String(""), ts;}
{
  [ <NOT> { rs = rs + " NOT "; } ]
  <LIKE> { rs = rs + " LIKE "; }
  ts = SQLPattern() { rs = rs + ts; }
  { return rs; }
}

String SQLPattern() :
{ String rs = new String(""), ts; }
{
  ( 
  //Following not in original grammar but seems like it should be in order to make
  //upper function work in LIKE pattern.
  LOOKAHEAD(2) ts = SQLFunction() { rs = rs + ts; }
  | LOOKAHEAD(2) ts = stringLiteralOrConcatenatedString() { rs = rs + ts; }
  | LOOKAHEAD(2) ts = SQLLvalue() { rs = rs + ts; }
  )
  { return rs; }

}


String SQLColRef() :
{ String s, rs = new String(""); }
{
  s = SQLLvalue()
  {
  	//Be forgiving to those that use the infomodel attribute name rather than the
  	//SQL column name which had to be different due to the name being a reserved word in SQL
        s = org.freebxml.omar.common.Utility.getInstance().mapColumnName(s);
  	rs = (rs + s).trim();

  	if ((!inINClause) && (!isPrimitiveAttribute(rs))) {
  		throw new ParseException("Invalid Query: Collection attribute " + rs + " is only valid in an IN clause");
  	}
	else if ((inINClause) && (!isPrimitiveAttribute(rs))) {
		//Need to map collection attribute to a list of IDs
		rs = mapCollectionAttributeToIdList(rs);
	}

	return rs;
  }
}

String SQLLvalue() :
{ String s = new String(""), t; }
{
  (
    t = SQLLvalueTerm()
	{
	  s = s + t + " ";
	}
  )
  	{ return s; }
}

String SQLLvalueTerm() :
{ Token x;
  String s = new String(""), ts;
}
{
  ( 
    (
      x = <ID>
            {
              s = x.image + " ";
            }
      ( <DOT> ts = idOrStar()
                    {
                      s = s.trim() + ".";
                      s = s + org.freebxml.omar.common.Utility.getInstance().mapColumnName(ts) + " ";
                    }
      )*
    )
    | <QUESTIONMARK> { s = s + "?"; }
    | x = <VARIABLE> { s = x.image + " ";	}
  )
  { return s; }
}

String idOrStar() :
{ Token x;
  String s = new String("");
}
{
  (
  x = <ID> { s = x.image + " ";}
  | "*" { s = "* "; }
  )
  {
    return s;
  }
}


String SQLSumExpr() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
    ts = SQLProductExpr() { rs = rs + ts; }
     (( "+" { rs = rs + "+ "; }
	| "-" { rs = rs + "- "; } )
      ts = SQLProductExpr() { rs = rs + ts; } )*
  { return rs; }
}


String SQLProductExpr() throws PrunePredicateException :
{ String rs = new String(""), ts;}
{
  ts = SQLUnaryExpr() { rs = rs + ts; }
  ( ( "*" { rs = rs + "* "; }
    | "/" { rs = rs + "/ "; }
    ) ts = SQLUnaryExpr() { rs = rs + ts; } )*
  { return rs; }
}

String SQLUnaryExpr() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
  [ ( "+" { rs = rs + "+ "; }
    | "-" { rs = rs + "- "; }
    )
  ] ts = SQLTerm() { rs = rs + ts; }
  { return rs; }
}

String SQLTerm() throws PrunePredicateException :
{ String rs = new String(""), ts; }
{
  (
     LOOKAHEAD(2) ts = SQLFunction() { rs = rs + ts; }
   | "(" { rs = rs + "( "; }
    ts = SQLOrExpr() { rs = rs + ts; }
    ")"
    {
        //For parameterized query, do predicate pruning in case a predicate parameter has not been supplied
        if (ts.indexOf('$') != -1) {
            //System.err.println("Pruning SQLTerm = " + rs + ") ");
            throw new PrunePredicateException();
        } else {
            rs = rs + ") ";
            //System.err.println("SQLTerm = " + rs);
        }
    }
  | LOOKAHEAD(2) ts = SQLColRef() { rs = rs + ts; }
  | ts = SQLLiteralOrVar() { rs = rs + ts; }
  )
  { return rs; }
}

String SQLLiteral() :
{Token x;
 String rs = new String("");
}
{
  (
    x = <STRING_LITERAL> { rs = rs + x.image + " "; }
  | x = <INTEGER_LITERAL> { rs = rs + x.image + " "; }
  | x = <FLOATING_POINT_LITERAL> { rs = rs + x.image + " "; }
  )
  { return rs; }
}

String stringLiteralOrConcatenatedString() :
{ String rs = new String(""), ts; }
{
  /* Though concatenation has a higher precedence than (for example) LIKE,
   * some databases (HSQLDB) get a bit confused.  Add parens to help out.
   */
  ts = concatenatedString() { rs = rs + "(" + ts + ") "; }
  { return rs; }
}

String concatenatedString() :
{ String rs = new String(""), ts; }
{
  ts = StringLiteralOrVar() { rs = rs + ts + " "; }
  (
    <PIPES> { rs = rs + " || "; }
    ts = StringLiteralOrVar() { rs = rs + ts + " "; }
   )*
  { return rs; }
}

String StringLiteralOrVar() :
{Token x;
 String rs = new String("");
}
{
  (
  x = <STRING_LITERAL> { rs = rs + x.image + " "; }
  | x = <VARIABLE> { rs = rs + x.image + " "; }
  | <QUESTIONMARK> { rs = rs + " ? "; }
  )
  { return rs; }
}

String SQLLiteralOrVar() :
{Token x;
 String rs = new String("");
}
{
  (
  x = <STRING_LITERAL> { rs = rs + x.image + " "; }
  | x = <INTEGER_LITERAL> { rs = rs + x.image + " "; }
  | x = <FLOATING_POINT_LITERAL> { rs = rs + x.image + " "; }
  | x = <VARIABLE> { rs = rs + x.image + " "; }
  | <QUESTIONMARK> { rs = rs + " ? "; }
  )
  { return rs; }
}

String SQLOrderBy() :
{ String rs = new String(""), ts; }
{
  <ORDER> <BY> {
                 rs = rs + " ORDER BY ";
               }
  ts = SQLOrderByList() { rs = rs + ts; }
  { return rs; }
}

String SQLOrderByElem() :
{ String rs = new String(""), ts; }
{
  ts = SQLColRef() { rs = rs + ts; }
  [ ts = SQLOrderDirection() { rs = rs + ts; } ]
  { return rs; }
}

String SQLOrderByList() :
{ String rs = new String(""), ts; }
{
  ts = SQLOrderByElem() { rs = rs + ts; }
  ( LOOKAHEAD(2)
    "," { rs = rs + ", "; }
    ts = SQLOrderByElem() { rs = rs + ts; })*
  { return rs; }
}

String SQLOrderDirection() :
{ String rs = new String(""); }
{
  (
    <ASC> { rs = rs + " ASC"; }
  | <DESC> { rs = rs + " DESC"; }
  )
  { return rs; }
}


